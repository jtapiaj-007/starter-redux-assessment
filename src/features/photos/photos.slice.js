import { createSlice } from '@reduxjs/toolkit';
import { selectSearchTerm } from '../search/search.slice';
import photos from './photos.data.js';

const initialState = {
  photos,
};

const options = {
  name: 'photos',
  initialState,
  reducers: {
    addPhoto: (state, action) => {
      let currentId = 0;

      /*
        Cannot use the lenght of the array as the factor to generate IDs, we need to searhc for the greatest
        existing id to pevent duplicated ids.

        Note: in a real application, IDs would be auto-generated by the Database and returned by API request.
      */
      for(let i = 0; i < state.photos.length; i++) {
        if(state.photos[i].id > currentId) {
          currentId = state.photos[i].id;
        }
      }

      state.photos.unshift(
        {
          id: currentId + 1, // When no elements exist, the new element ID will be 1
          caption: action.payload.caption,
          imageUrl: action.payload.imageUrl
        });
    },

    removePhoto: (state, action) => {
      // We need to first find the index of the element to delete, then remove it from the array
      const index = state.photos.findIndex(photo => photo.id === action.payload);
      state.photos.splice(index, 1);
    }
  },
};

const photosSlice = createSlice(options);

export const { addPhoto, removePhoto } = photosSlice.actions;

export default photosSlice.reducer;

export const selectAllPhotos = (state) => state.photos.photos;
export const selectFilteredPhotos = (state) => {
  // Task 12: Complete `selectFilteredPhotos()` selector to return a filtered list of photos whose captions match the user's search term
  const photos = selectAllPhotos(state);
  const searchTerm = selectSearchTerm(state);

  return photos.filter((item) => 
    item.caption.toLowerCase().includes(searchTerm.toLowerCase())
  );
};
